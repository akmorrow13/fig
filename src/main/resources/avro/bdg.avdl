/**
 * Licensed to Big Data Genomics (BDG) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The BDG licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@namespace("org.bdgenomics.formats.avro")
protocol BDG {

/**
 Record for describing a reference assembly. Not used for storing the contents
 of said assembly.

 @see NucleotideContigFragment
 */
record Contig {
  /**
   The name of this contig in the assembly (e.g., "chr1").
   */
  union { null, string } contigName = null;

  /**
   The length of this contig.
   */
  union { null, long }   contigLength = null;

  /**
   The MD5 checksum of the assembly for this contig.
   */
  union { null, string } contigMD5 = null;

  /**
   The URL at which this reference assembly can be found.
   */
  union { null, string } referenceURL = null;

  /**
   The name of this assembly (e.g., "hg19").
   */
  union { null, string } assembly = null;

  /**
   The species that this assembly is for.
   */
  union { null, string } species = null;
}

/**
 Descriptors for the type of a structural variant. The most specific descriptor
 should be used, if possible. E.g., duplication should be used instead of
 insertion if the inserted sequence is not novel. Tandem duplication should
 be used instead of duplication if the duplication is known to follow the
 duplicated sequence.
 */
enum StructuralVariantType {
  DELETION,
  INSERTION,
  INVERSION,
  MOBILE_INSERTION,
  MOBILE_DELETION,
  DUPLICATION,
  TANDEM_DUPLICATION
}

record StructuralVariant {
  /**
   The type of this structural variant.
   */
  union { null, StructuralVariantType } type = null;
  /**
   The URL of the FASTA/NucleotideContig assembly for this structural variant,
   if one is available.
   */
  union { null, string } assembly = null;

  /**
   Whether this structural variant call has precise breakpoints or not. Default
   value is true. If the call is imprecise, confidence intervals should be provided.
   */
  union { boolean, null } precise = true;
  /**
   The size of the confidence window around the start of the structural variant.
   */
  union { null, int } startWindow = null;
  /**
   The size of the confidence window around the end of the structural variant.
   */
  union { null, int } endWindow = null;
}

record Variant {
  /**
   The reference contig that this variant exists on.
   */
  union { null, Contig } contig = null;
  /**
   The 0-based start position of this variant on the reference contig.
   */
  union { null, long } start = null;
  /**
   The 0-based, exclusive end position of this variant on the reference contig.
   */
  union { null, long } end = null;

  /**
   A string describing the reference allele at this site.
   */
  union { null, string } referenceAllele = null;
  /**
   A string describing the variant allele at this site. Should be left null if
   the site is a structural variant.
   */
  union { null, string } alternateAllele = null;
  /**
   The structural variant at this site, if the alternate allele is a structural
   variant. If the site is not a structural variant, this field should be left
   null.
   */
  union { null, StructuralVariant } svAllele = null;

  /**
   A boolean describing whether this variant call is somatic; in this case, the
   `referenceAllele` will have been observed in another sample.
   */
  union { boolean, null } isSomatic = false;
}

enum Strand {
  Forward,
  Reverse,
  Independent
}

}