/**
 * Licensed to Big Data Genomics (BDG) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The BDG licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@namespace("org.bdgenomics.formats.avro")
protocol BDG {

/**
 Descriptors for the type of a structural variant. The most specific descriptor
 should be used, if possible. E.g., duplication should be used instead of
 insertion if the inserted sequence is not novel. Tandem duplication should
 be used instead of duplication if the duplication is known to follow the
 duplicated sequence.
 */
enum StructuralVariantType {
  DELETION,
  INSERTION,
  INVERSION,
  MOBILE_INSERTION,
  MOBILE_DELETION,
  DUPLICATION,
  TANDEM_DUPLICATION
}

record StructuralVariant {
  /**
   The type of this structural variant.
   */
  union { null, StructuralVariantType } type = null;
  /**
   The URL of the FASTA/NucleotideContig assembly for this structural variant,
   if one is available.
   */
  union { null, string } assembly = null;

  /**
   Whether this structural variant call has precise breakpoints or not. Default
   value is true. If the call is imprecise, confidence intervals should be provided.
   */
  union { boolean, null } precise = true;
  /**
   The size of the confidence window around the start of the structural variant.
   */
  union { null, int } startWindow = null;
  /**
   The size of the confidence window around the end of the structural variant.
   */
  union { null, int } endWindow = null;
}

/**
 Variant.
 */
record Variant {

  /**
   The reference contig this variant exists on. VCF column 1 "CONTIG".
   */
  union { null, string } contigName = null;

  /**
   The zero-based start position of this variant on the reference contig.
   VCF column 2 "POS" converted to zero-based coordinate system, closed-open intervals.
   */
  union { null, long } start = null;

  /**
   The zero-based, exclusive end position of this variant on the reference contig.
   Calculated by start + referenceAllele.length().
   */
  union { null, long } end = null;

  /**
   Zero or more unique names or identifiers for this variant. If this is a dbSNP
   variant it is encouraged to use the rs number(s). VCF column 3 "ID" copied for
   multi-allelic sites.
   */
  array<string> names = [];

  /**
   A string describing the reference allele at this site. VCF column 4 "REF".
   */
  union { null, string } referenceAllele = null;

  /**
   A string describing the alternate allele at this site. VCF column 5 "ALT" split
   for multi-allelic sites.
   */
  union { null, string } alternateAllele = null;

  /**
   True if this variant call is somatic; in this case, the referenceAllele will
   have been observed in another sample. VCF INFO reserved key "SOMATIC" copied
   for multi-allelic sites.
   */
  union { boolean, null } somatic = false;
}

/**
 Strand of an alignment or feature.
 */
enum Strand {

  /**
   Forward ("+") strand.
   */
  FORWARD,

  /**
   Reverse ("-") strand.
   */
  REVERSE,

  /**
   Independent or not stranded (".").
   */
  INDEPENDENT,

  /**
   Strandedness is relevant, but unknown ("?").
   */
  UNKNOWN
}

}